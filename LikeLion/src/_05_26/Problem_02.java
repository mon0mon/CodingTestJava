package _05_26;

/*
**문제 설명**

2차원 좌표 평면에 풍선이 놓여있습니다. 당신은 원점(0,0)에서 레이저를
발사해 풍선을 터뜨리려합니다.레이저는 발사한 방향으로 직진해서 무한히
나아가며, 만약 진행 방향에 풍선이 있다면 풍선을 터뜨리고 계속해서
나아갑니다. 따라서, 레이저를 한 번 발사해서 풍선 여러 개를 터뜨릴 수도
있습니다.

다음은 좌표 평면에 풍선이 놓여있는 예시입니다.
풍선은 (2,2), (4,4), (1,4), (-1,-4) 위치에 놓여있습니다. 이때, 레이저를 최소
3번 발사하면 모든 풍선을 터뜨릴 수 있습니다.
풍선이 놓여있는 좌표가 담긴 2차원 배열 balloons가 매개변수로 주어질 때,
모든 풍선을 터뜨리려면 레이저를 최소 몇 번 발사해야 하는지 return 하도록
solution 함수를 완성해주세요.

단, 풍선은 부피가 없고, 레이저가 나아가는 직선과 풍선 좌표가 정확히 만나는
경우에만 풍선이 터진다고 가정합니다.

**제한사항**
balloons는 풍선들의 좌표가 담긴 2차원 리스트 입니다.
balloons에는 풍선 좌표가 [x축,y축] (리스트) 순서로 들어있습니다.
balloons의 길이는(풍선갯수)는 1이상 100,000이하입니다.
balloons의 x축,y축 좌표는 -1,000,000,000 이상 1,000,000,000 이하인
정수입니다.
단 풍선의 좌표가 [0,0]인 경우는 없습니다.
서로 다른 두 풍선의 좌표가 같은 경우는 없습니다.

**입출력 예**

balloons = [[2,2],[4,4],[1,4],[-1,-4]] , return = 3
 */
public class Problem_02 {

    public static void main(String[] args) {

    }

    public static int solution(int[][] balloons) {

        return 0;
    }
}
